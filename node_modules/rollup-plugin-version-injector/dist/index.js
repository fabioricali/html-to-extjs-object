import { merge } from 'lodash';
import { defaultConfig } from './config/config';
import { VIInjector } from './utils/injector';
import { VILogger } from './utils/logger';
export default function versionInjector(userConfig) {
    const pluginName = 'version-injector';
    const config = merge({}, defaultConfig, userConfig);
    const logger = new VILogger(config.logLevel, config.logger);
    const injector = new VIInjector(logger);
    const version = injector.getVersion(config.packageJson);
    return {
        name: pluginName,
        renderChunk(code, chunk) {
            logger.debug('chunk', chunk);
            logger.info(`${pluginName} started with version "${version}"`);
            logger.debug('config', config);
            const fileName = chunk.fileName;
            if (config.exclude.includes(fileName)) {
                logger.info('file was in the exclude list - skipping', fileName);
                return;
            }
            if (chunk.type === 'asset') {
                logger.info('output bundle was an asset - skipping', fileName);
                return;
            }
            injector.setCode(code);
            injector.injectIntoTags(config.injectInTags, fileName, version);
            injector.injectIntoComments(config.injectInComments, fileName, version);
            if (injector.isCodeChanged()) {
                logger.info(`${pluginName} finished`);
                return { code: injector.getCode(), map: null };
            }
            else {
                logger.info(`file was not changed. did not write to file "${fileName}"`);
            }
        }
    };
}
//# sourceMappingURL=index.js.map